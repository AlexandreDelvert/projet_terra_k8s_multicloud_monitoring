name: CI Terraform + Versioning

on:
  push:
    branches:
      - main

jobs:
  validate-and-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "github-actions"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform/init

      - name: Terraform Validate
        run: terraform validate

      # 🧠 Get latest version tag (or fallback)
      - name: Get latest tag
        id: get_tag
        run: |
          tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $tag"
          echo "tag=${tag#v}" >> $GITHUB_OUTPUT

      # 🧮 Determine next version based on diff
      - name: Calculate next version
        id: bump
        run: |
          last_version=${{ steps.get_tag.outputs.tag }}
          IFS='.' read -r major minor patch <<< "$last_version"

          added_files=$(git diff --name-only HEAD^ HEAD | wc -l)
          changed_lines=$(git diff --stat HEAD^ HEAD | grep -E '[0-9]+ insertions?|[0-9]+ deletions?' | awk '{sum += $1} END {print sum + 0}')

          if [ "$changed_lines" -gt 20 ] || [ "$added_files" -gt 2 ]; then
            ((major+=1))
            minor=0
            patch=0
          elif [ "$changed_lines" -gt 20 ] || [ "$added_files" -gt 0 ]; then
            ((minor+=1))
            patch=0
          else
            ((patch+=1))
          fi

          new_version="${major}.${minor}.${patch}"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "📌 Nouvelle version : $new_version"

      # 🏷️ Create Git Tag
      - name: Create and push Git tag
        run: |
          git tag "v${{ steps.bump.outputs.new_version }}"
          git push origin "v${{ steps.bump.outputs.new_version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 🚀 Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump.outputs.new_version }}
          name: "Version ${{ steps.bump.outputs.new_version }}"
          body: "🔖 Release générée automatiquement"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
