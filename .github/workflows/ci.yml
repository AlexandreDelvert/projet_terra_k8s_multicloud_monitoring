name: Terraform CI

on:
  push:
    branches:
      - main

jobs:
  validate:
    name: Validate Terraform code
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate
name: Get latest tag
  id: get_tag
  run: |
    tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
    echo "Latest tag: $tag"
    echo "tag=${tag#v}" >> $GITHUB_OUTPUT

name: Calculate changes since last tag
  id: changes
  run: |
    git fetch --tags
    files_added=$(git diff --name-only --diff-filter=A ${{ steps.get_tag.outputs.tag }} HEAD | wc -l)
    lines_changed=$(git diff --numstat ${{ steps.get_tag.outputs.tag }} HEAD | awk '{added += $1; deleted += $2} END {print added + deleted}')
    echo "added_files=$files_added" >> $GITHUB_OUTPUT
    echo "changed_lines=$lines_changed" >> $GITHUB_OUTPUT

name: Bump version
  id: bump
  run: |
    current="${{ steps.get_tag.outputs.tag }}"
    IFS='.' read -r major minor patch <<< "$current"
    added=${{ steps.changes.outputs.added_files }}
    changed=${{ steps.changes.outputs.changed_lines }}

    if [[ $changed -gt 20 || $added -gt 2 ]]; then
      ((major++))
      minor=0
      patch=0
    elif [[ $changed -gt 20 || $added -gt 0 ]]; then
      ((minor++))
      patch=0
    else
      ((patch++))
    fi

    version="$major.$minor.$patch"
    echo "new_version=$version" >> $GITHUB_OUTPUT
    echo "ðŸ†• Nouvelle version: $version"

name: Create and push Git tag
  run: |
    version=${{ steps.bump.outputs.new_version }}
    git config --global user.email "actions@github.com"
    git config --global user.name "github-actions"
    git tag "v$version"
    git push origin "v$version"
  env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Create GitHub Release
  uses: softprops/action-gh-release@v1
  with:
    tag_name: v${{ steps.bump.outputs.new_version }}
    name: "Version ${{ steps.bump.outputs.new_version }}"
    body: "ðŸ”– Release automatique gÃ©nÃ©rÃ©e Ã  partir des changements dÃ©tectÃ©s."
  env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


